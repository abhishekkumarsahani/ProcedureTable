TABLE 

USE [EasySchoolNew]
GO

/****** Object:  Table [dbo].[tbl_school_bus_assign]    Script Date: 7/30/2024 1:08:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[tbl_school_bus_assign](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[sch_id] [nvarchar](50) NULL,
	[user_id] [int] NOT NULL,
	[bus_id] [int] NOT NULL,
	[pickup_location] [varchar](100) NULL,
	[dropoff_location] [varchar](100) NULL,
	[created_by] [int] NOT NULL,
	[updated_by] [int] NOT NULL,
	[created_date] [datetime] NOT NULL,
	[updated_date] [datetime] NOT NULL,
	[is_del] [char](1) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[tbl_school_bus_assign] ADD  DEFAULT ('N') FOR [is_del]
GO


PROCEDURE 

USE [EasySchoolNew]
GO
/****** Object:  StoredProcedure [dbo].[sp_admin_assign_bus]    Script Date: 7/30/2024 12:49:23 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[sp_admin_assign_bus]
(
    @userid INT,
    @schid NVARCHAR(50),
    @busid INT,
    @pickuplocation VARCHAR(100) = NULL,
    @dropofflocation VARCHAR(100) = NULL,
    @flag CHAR(1),
    @students XML
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @today DATETIME = GETDATE();
    DECLARE @assignbusid INT;

    -- Create a table variable to store student IDs temporarily
    DECLARE @TempStudentIDs TABLE (
        studentid INT PRIMARY KEY
    );

    -- Validate User, School, and Bus existence
    IF NOT EXISTS (SELECT 1 FROM tbl_user WHERE user_id = @userid AND sch_id = @schid AND del_flag = 'N')
    BEGIN
        SELECT 201 AS StatusCode, 'User does not exist or school does not exist' AS Message;
        RETURN;
    END
    
    IF NOT EXISTS (SELECT 1 FROM tbl_school WHERE sch_id = @schid AND del_flag = 'N')
    BEGIN
        SELECT 201 AS StatusCode, 'School does not exist' AS Message;
        RETURN;
    END
    
    IF NOT EXISTS (SELECT 1 FROM tbl_school_bus WHERE ID = @busid AND is_del = 'N')
    BEGIN
        SELECT 201 AS StatusCode, 'Bus does not exist' AS Message;
        RETURN;
    END

    IF @flag = 'I'
    BEGIN
        -- Insert a new assignment
        INSERT INTO tbl_school_bus_assign (user_id, sch_id, bus_id, pickup_location, dropoff_location, created_by, updated_by, created_date, updated_date)
        VALUES (@userid, @schid, @busid, @pickuplocation, @dropofflocation, @userid, @userid, @today, @today);

        SET @assignbusid = SCOPE_IDENTITY();

        -- Parse and insert students into the table variable
        INSERT INTO @TempStudentIDs (studentid)
        SELECT Node.Data.value('(StudentID)[1]', 'INT')
        FROM @students.nodes('/Students/Student') AS Node(Data);

        -- Display the data from the table variable
        -- You would replace this section with actual operations if needed
        SELECT @assignbusid AS AssignBusID, studentid AS StudentID
        FROM @TempStudentIDs;

        SELECT 200 AS StatusCode, 'Success' AS Message;
    END
    ELSE IF @flag = 'U'
    BEGIN
        -- Update existing assignment
        SET @assignbusid = (SELECT TOP 1 id FROM tbl_school_bus_assign WHERE user_id = @userid AND bus_id = @busid AND sch_id = @schid AND is_del = 'N');
        
        IF @assignbusid IS NOT NULL
        BEGIN
            UPDATE tbl_school_bus_assign
            SET 
                pickup_location = @pickuplocation,
                dropoff_location = @dropofflocation,
                updated_by = @userid,
                updated_date = @today
            WHERE id = @assignbusid;

           

            -- Parse and insert students into the table variable
            INSERT INTO @TempStudentIDs (studentid)
            SELECT Node.Data.value('(StudentID)[1]', 'INT')
            FROM @students.nodes('/Students/Student') AS Node(Data);

            -- Display the data from the table variable
            -- You would replace this section with actual operations if needed
            SELECT @assignbusid AS AssignBusID, studentid AS StudentID
            FROM @TempStudentIDs;

            SELECT 200 AS StatusCode, 'Success' AS Message;
        END
        ELSE
        BEGIN
            -- Assignment not found
            SELECT 201 AS StatusCode, 'Assignment not found' AS Message;
        END
    END
    ELSE IF @flag = 'R'
    BEGIN
        -- Remove the assignment
        SET @assignbusid = (SELECT TOP 1 id FROM tbl_school_bus_assign WHERE user_id = @userid AND bus_id = @busid AND sch_id = @schid AND is_del = 'N');
        
        IF @assignbusid IS NOT NULL
        BEGIN
            UPDATE tbl_school_bus_assign
            SET is_del = 'Y',
                updated_by = @userid,
                updated_date = @today
            WHERE id = @assignbusid;

            -- Optionally handle student assignments here

            SELECT 200 AS StatusCode, 'Success' AS Message;
        END
        ELSE
        BEGIN
            -- Assignment not found
            SELECT 201 AS StatusCode, 'Assignment not found' AS Message;
        END
    END
    ELSE IF @flag = 'S'
    BEGIN
        -- View the assignment details
        SELECT 
            a.id AS AssignID,
            u.full_name AS StudentName,
            c.class_name AS ClassName,
            s.section_name AS SectionName
        FROM tbl_school_bus_assign a
        JOIN tbl_user u ON a.user_id = u.user_id
        JOIN tbl_class c ON u.class_id = c.class_id
        JOIN tbl_section s ON u.section_id = s.section_id
        WHERE a.sch_id = @schid
        AND a.bus_id = @busid
        AND a.is_del = 'N';

        SELECT 200 AS StatusCode, 'Success' AS Message;
    END
END;

